---
my_ip: &my_ip '192.168.1.10/32'
resource_prefix: 'my-app'
hosted_zone: example.net
domain_name: &domain_name my-app.example.net
zone_alias_id: Zone-alias-id-for-cname-aliasing
aws:
  tags:
    user: '<a-user>'
    environment: 'development'
    purpose: 'testing'

  ## Currently, changing anything here after infra is stood up will cause just about
  ## everything to be rebuilt/recreated
  vpc:
    cidr: '172.31.0.0/16'
    subnet_size: 24 # We will attempt to use the vpc.cidr to carve out subnets of this size
    num_private_subnets: 2 # the number of private subnets we'll attempt to create
    num_public_subnets: 2 # the number of PUBLIC subnets we'll attempt to create

  ec2:
    enabled: !!bool true
    instance_type: 't3a.medium'
    iam_instance_profile: 'iam-profile-name'
    ami: 'ami-id'
    key_name: 'your-ec2-key-name'
    security_group:
      rules:
        ingress:
          - protocol: 'tcp'
            from_port: 8080
            to_port: 8080
            cidr_ip: *vpc_cidr
    tags:
      Name: *domain_name

  lb:
    enabled: !!bool true
    type: 'application'
    certificate_arn: 'arn:aws:acm:us-east-1:1234567890:certificate/4v46hv-ryheryyh-vehy-vt7u-ve5h645745'
    security_group:
      rules:
        ingress:
          - protocol: 'tcp'
            from_port: 80
            to_port: 80
            cidr_ip: *my_ip
          - protocol: 'tcp'
            from_port: 443
            to_port: 443
            cidr_ip: *my_ip

  efs:
    enabled: !!bool true
    transition_to_ia: "AFTER_30_DAYS"
    csi_driver:
      enabled: !!bool true
      version: 2.5.6

  eks:
    enabled: !!bool true
    version: '1.29'
    desired_nodes_per_group: 2 # used for desired AND min
    max_nodes_per_group: 10
    ## The number of NODE GROUPS created depends on the number of subnets. 1 group per subnet will be created.
    node_groups:
      instance_types: # AWS will attempt to create instances from
        - m6a.xlarge
        - m6a.2xlarge
        - t3a.xlarge
      memory_mib:
        min: 8192
        max: 16384
      vcpu_count:
        min: 4
        max: 8
    loadbalancer_controller:
      # the aws-load-balancer-controller needs to be installed differently than addons
      enabled: !!bool true
      role_name_prefix: aws-load-balancer-controller-iam-role
      service_role_name: aws-load-balancer-controller
    ## aws eks describe-addon-versions --kubernetes-version x.xx --addon-name the-addon-name
    addons:
      - name: aws-ebs-csi-driver
        version: v1.29.1-eksbuild.1

  rds:
    enabled: !!bool true
    aws_rds_type: instance ## or cluster, if you want a multi-az cluster instead
    storage: 75
    storage_type: gp3
    engine: 'mysql'
    engine_version: '8.0.35'
    family: 'mysql8.0'
    instance_class: 'db.m5d.xlarge'
    port: 3306
    db_name: db_default
    db_user: db_user_default
    subdomain: db   ## we end up creating {subdomain}.{resource_prefix}.{tld}
    tld: internal.com
    parameters:
      character_set_server: utf8
      character_set_client: utf8